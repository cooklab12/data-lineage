Redis util notes

@Autowired
private RedisTemplate<String, Object> redisTemplate;

public long getSumOfAllErrorCounts(String redisKey) {
    // Retrieve all hash entries for the given key
    Map<Object, Object> entries = redisTemplate.opsForHash().entries(redisKey);

    long totalErrorCount = 0;

    // Iterate through all fields and sum up the error counts
    for (Map.Entry<Object, Object> entry : entries.entrySet()) {
        String field = (String) entry.getKey();

        // Check if the field is related to errorCount
        if (field.endsWith(":errorCount")) {
            String errorCountStr = (String) entry.getValue(); // Assuming it's stored as a string
            try {
                // Convert the string to long and sum it up
                long errorCount = Long.parseLong(errorCountStr);
                totalErrorCount += errorCount;
            } catch (NumberFormatException e) {
                // Handle invalid number format, if necessary
                System.out.println("Invalid error count value for field: " + field);
            }
        }
    }

    return totalErrorCount;
}


--Using streams

@Autowired
private RedisTemplate<String, Object> redisTemplate;

public long getSumOfAllErrorCountsUsingStreams(String redisKey) {
    // Retrieve all hash entries for the given key
    Map<Object, Object> entries = redisTemplate.opsForHash().entries(redisKey);

    // Use streams to filter, map to long, and sum the error counts
    return entries.entrySet().stream()
        .filter(entry -> ((String) entry.getKey()).endsWith(":errorCount"))  // Filter fields ending with ":errorCount"
        .mapToLong(entry -> {
            String errorCountStr = (String) entry.getValue(); // Assuming value is stored as String
            try {
                return Long.parseLong(errorCountStr);  // Convert the string to long
            } catch (NumberFormatException e) {
                System.out.println("Invalid error count value: " + errorCountStr);
                return 0L;  // Return 0 if there's an invalid format
            }
        })
        .sum();  // Sum all the filtered and converted error counts
}

SELECT 
    categoryCode,
    COUNT(*) AS count,
    CASE 
        WHEN categoryCode = 'A' THEN 'Active'
        WHEN categoryCode = 'C' THEN 'Closed'
        ELSE 'Unknown'  -- Optional: handle other cases
    END AS categoryCodeDescription
FROM your_table
GROUP BY 
    categoryCode;


SELECT
    SUM(CASE 
            WHEN TRUNC(SYSDATE) - previous_success_date BETWEEN 0 AND 5 THEN 1 
            ELSE 0 
        END) AS "0-5_days",
    SUM(CASE 
            WHEN TRUNC(SYSDATE) - previous_success_date BETWEEN 6 AND 10 THEN 1 
            ELSE 0 
        END) AS "6-10_days",
    SUM(CASE 
            WHEN TRUNC(SYSDATE) - previous_success_date > 10 THEN 1 
            ELSE 0 
        END) AS "10+_days"
FROM 
    (SELECT DISTINCT acctkey, previous_success_date 
     FROM status);


SELECT 
    proc_inst_id_,
    MAX(CASE WHEN NAME_ = 'applicationName' THEN TEXT_ END) as applicationName,
    MAX(CASE WHEN NAME_ = 'customerId' THEN TEXT_ END) as customerId,
    MAX(CASE WHEN NAME_ = 'status' THEN TEXT_ END) as status
    -- Add more variables as needed following the same pattern:
    -- MAX(CASE WHEN NAME_ = 'yourVariableName' THEN TEXT_ END) as yourVariableName
FROM ACT_RU_VARIABLE
GROUP BY proc_inst_id_
ORDER BY proc_inst_id_;;