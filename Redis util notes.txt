Redis util notes

@Autowired
private RedisTemplate<String, Object> redisTemplate;

public long getSumOfAllErrorCounts(String redisKey) {
    // Retrieve all hash entries for the given key
    Map<Object, Object> entries = redisTemplate.opsForHash().entries(redisKey);

    long totalErrorCount = 0;

    // Iterate through all fields and sum up the error counts
    for (Map.Entry<Object, Object> entry : entries.entrySet()) {
        String field = (String) entry.getKey();

        // Check if the field is related to errorCount
        if (field.endsWith(":errorCount")) {
            String errorCountStr = (String) entry.getValue(); // Assuming it's stored as a string
            try {
                // Convert the string to long and sum it up
                long errorCount = Long.parseLong(errorCountStr);
                totalErrorCount += errorCount;
            } catch (NumberFormatException e) {
                // Handle invalid number format, if necessary
                System.out.println("Invalid error count value for field: " + field);
            }
        }
    }

    return totalErrorCount;
}


--Using streams

@Autowired
private RedisTemplate<String, Object> redisTemplate;

public long getSumOfAllErrorCountsUsingStreams(String redisKey) {
    // Retrieve all hash entries for the given key
    Map<Object, Object> entries = redisTemplate.opsForHash().entries(redisKey);

    // Use streams to filter, map to long, and sum the error counts
    return entries.entrySet().stream()
        .filter(entry -> ((String) entry.getKey()).endsWith(":errorCount"))  // Filter fields ending with ":errorCount"
        .mapToLong(entry -> {
            String errorCountStr = (String) entry.getValue(); // Assuming value is stored as String
            try {
                return Long.parseLong(errorCountStr);  // Convert the string to long
            } catch (NumberFormatException e) {
                System.out.println("Invalid error count value: " + errorCountStr);
                return 0L;  // Return 0 if there's an invalid format
            }
        })
        .sum();  // Sum all the filtered and converted error counts
}

SELECT 
    categoryCode,
    COUNT(*) AS count,
    CASE 
        WHEN categoryCode = 'A' THEN 'Active'
        WHEN categoryCode = 'C' THEN 'Closed'
        ELSE 'Unknown'  -- Optional: handle other cases
    END AS categoryCodeDescription
FROM your_table
GROUP BY 
    categoryCode;


SELECT
    SUM(CASE 
            WHEN TRUNC(SYSDATE) - previous_success_date BETWEEN 0 AND 5 THEN 1 
            ELSE 0 
        END) AS "0-5_days",
    SUM(CASE 
            WHEN TRUNC(SYSDATE) - previous_success_date BETWEEN 6 AND 10 THEN 1 
            ELSE 0 
        END) AS "6-10_days",
    SUM(CASE 
            WHEN TRUNC(SYSDATE) - previous_success_date > 10 THEN 1 
            ELSE 0 
        END) AS "10+_days"
FROM 
    (SELECT DISTINCT acctkey, previous_success_date 
     FROM status);


SELECT 
    proc_inst_id_,
    MAX(CASE WHEN NAME_ = 'applicationName' THEN TEXT_ END) as applicationName,
    MAX(CASE WHEN NAME_ = 'customerId' THEN TEXT_ END) as customerId,
    MAX(CASE WHEN NAME_ = 'status' THEN TEXT_ END) as status
    -- Add more variables as needed following the same pattern:
    -- MAX(CASE WHEN NAME_ = 'yourVariableName' THEN TEXT_ END) as yourVariableName
FROM ACT_RU_VARIABLE
GROUP BY proc_inst_id_
ORDER BY proc_inst_id_;;


-- Option 1: Convert BLOB to VARCHAR (if content is text-based)
SELECT 
    ID_,
    NAME_,
    CAST(BYTES_ AS VARCHAR(MAX)) as CONTENT_TEXT
FROM ACT_GE_BYTEARRAY
WHERE ID_ = 'your_byte_array_id';

-- Option 2: Convert BLOB to Base64 string (if binary content)
SELECT 
    ID_,
    NAME_,
    CAST('' AS XML).value('xs:base64Binary(xs:hexBinary(sql:column("BYTES_")))', 'VARCHAR(MAX)') as CONTENT_BASE64
FROM ACT_GE_BYTEARRAY
WHERE ID_ = 'your_byte_array_id';

-- Option 3: View all metadata and first part of content
SELECT 
    ID_,
    NAME_,
    DEPLOYMENT_ID_,
    BYTES_ as RAW_CONTENT,
    CAST(SUBSTRING(CAST(BYTES_ AS VARCHAR(MAX)), 1, 1000) as VARCHAR(1000)) as PREVIEW_CONTENT,
    DATALENGTH(BYTES_) as CONTENT_LENGTH
FROM ACT_GE_BYTEARRAY
ORDER BY ID_;



SELECT ID_, NAME_, UTL_RAW.CAST_TO_VARCHAR2(DBMS_LOB.SUBSTR(BYTES_, 4000, 1)) AS TEXT_CONTENT
FROM ACT_GE_BYTEARRAY
WHERE NAME_ = 'your_filename_here'
AND LENGTH(BYTES_) <= 4000; -- Adjust this based on your needs


<dependency>
    <groupId>com.opencsv</groupId>
    <artifactId>opencsv</artifactId>
    <version>5.5.2</version>
</dependency>
<dependency>
    <groupId>org.json</groupId>
    <artifactId>json</artifactId>
    <version>20210307</version>
</dependency>


import com.opencsv.CSVReader;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.FileReader;
import java.io.IOException;

public class CSVtoJSON {
    public static void main(String[] args) throws IOException {
        String csvFilePath = "your_file.csv";
        JSONArray jsonArray = new JSONArray();

        try (CSVReader reader = new CSVReader(new FileReader(csvFilePath))) {
            String[] headers = reader.readNext(); // First row as headers
            String[] row;
            while ((row = reader.readNext()) != null) {
                JSONObject jsonObject = new JSONObject();
                for (int i = 0; i < headers.length; i++) {
                    jsonObject.put(headers[i], row[i]);
                }
                jsonArray.put(jsonObject);
            }
        }

        System.out.println(jsonArray.toString());
    }
}





import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.List;

public class JsonToListExample {
    public static void main(String[] args) {
        String jsonArray = "[{\"field1\":\"value1\", \"field2\":123}, {\"field1\":\"value2\", \"field2\":456}]";

        ObjectMapper mapper = new ObjectMapper();
        try {
            List<MyObject> myObjectList = mapper.readValue(jsonArray, new TypeReference<List<MyObject>>() {});
            myObjectList.forEach(obj -> System.out.println(obj.getField1() + ", " + obj.getField2()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}